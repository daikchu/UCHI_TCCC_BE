package com.vn.osp.notarialservices.announcement.service;import com.vn.osp.notarialservices.announcement.domain.AnnouncementBo;import com.vn.osp.notarialservices.announcement.dto.Announcement;import com.vn.osp.notarialservices.announcement.dto.NotaryOfficeByAnnouncement;import com.vn.osp.notarialservices.announcement.repository.AnnouncementRepository;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.math.BigInteger;import java.util.ArrayList;import java.util.List;import java.util.Optional;/** * Created by minh on 11/7/2016. */@Componentpublic class AnnouncementServiceImpl implements AnnouncementService {    private static final Logger LOGGER = Logger.getLogger(AnnouncementServiceImpl.class);    private final AnnouncementRepository announcementRepository;    private final AnnouncementConverter announcementConverter;    @Autowired    public AnnouncementServiceImpl(final AnnouncementRepository announcementRepository, final AnnouncementConverter announcementConverter) {        this.announcementRepository = announcementRepository;        this.announcementConverter = announcementConverter;    }    @Override    public Optional<Announcement> findAnnouncementByID(Long aid) {        return announcementRepository.findAnnouncementByID(aid).map(announcementConverter::convert);    }    @Override    public Optional<List<Announcement>> findAnnouncement(Long numOffset, Long numLimit) {        List<AnnouncementBo> boList = announcementRepository.findAnnouncement(numOffset, numLimit).orElse(new ArrayList<AnnouncementBo>());        ArrayList<Announcement> resultList = new ArrayList<Announcement>();        if (boList != null && boList.size() > 0) {            for (int i = 0; i < boList.size(); i++) {                resultList.add(Optional.ofNullable(boList.get(i)).map(announcementConverter::convert).orElse(new Announcement()));            }        }        return Optional.of(resultList);    }    @Override    public Optional<List<Announcement>> findAnnouncementByFilter(String stringFilter) {        List<AnnouncementBo> listBO = announcementRepository.findAnnouncementByFilter(stringFilter).orElse(new ArrayList<AnnouncementBo>());        ArrayList<Announcement> list = new ArrayList<Announcement>();        if (listBO != null && listBO.size() > 0) {            for (int i = 0; i < listBO.size(); i++) {                list.add(Optional.ofNullable(listBO.get(i)).map(announcementConverter::convert).orElse(new Announcement()));            }        }        return Optional.of(list);    }    @Override    public Optional<BigInteger> countTotalAnnouncement() {        return announcementRepository.countTotalAnnouncement();    }    @Override    public Optional<BigInteger> countTotalAnnouncementByFilter(String stringFilter) {        return announcementRepository.countTotalAnnouncementByFilter(stringFilter);    }    @Override    public Optional<Boolean> AddAnnouncement(String xml_content) {        return announcementRepository.AddAnnouncement(xml_content);    }    @Override    public Optional<Boolean> UpdateAnnouncement(String xml_content) {        return announcementRepository.UpdateAnnouncement(xml_content);    }    @Override    public Optional<Boolean> deleteAnnouncementById(Long aid) {        return announcementRepository.deleteAnnouncementById(aid);    }    @Override    public Optional<Boolean> removeFile(String input) {        long aid = Long.valueOf(input.split(";")[0]);        String file_name = input.split(";")[1];        String file_path = input.split(";")[2];        return announcementRepository.removeFile(aid,file_name,file_path);    }    @Override    public Optional<List<Announcement>> findLatestAnnouncement(Long countNumber,String stringFilter) {        List<AnnouncementBo> listBO = announcementRepository.findLatestAnnouncement(countNumber,stringFilter).orElse(new ArrayList<AnnouncementBo>());        ArrayList<Announcement> list = new ArrayList<Announcement>();        if (listBO != null && listBO.size() > 0) {            for (int i = 0; i < listBO.size(); i++) {                list.add(Optional.ofNullable(listBO.get(i)).map(announcementConverter::convert).orElse(new Announcement()));            }        }        return Optional.of(list);    }    @Override    public Optional<List<Announcement>> popupAnnouncement(String stringPopup) {        List<AnnouncementBo> listBO = announcementRepository.popupAnnouncement(stringPopup).orElse(new ArrayList<AnnouncementBo>());        ArrayList<Announcement> list = new ArrayList<Announcement>();        if (listBO != null && listBO.size() > 0) {            for (int i = 0; i < listBO.size(); i++) {                list.add(Optional.ofNullable(listBO.get(i)).map(announcementConverter::convert).orElse(new Announcement()));            }        }        return Optional.of(list);    }    @Override    public List<NotaryOfficeByAnnouncement> selectNotaryOfficeByAnnouncement(String stringFilter) {        return announcementRepository.selectNotaryOfficeByAnnouncement(stringFilter);    }}